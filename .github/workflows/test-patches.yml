name: Test Patches
run-name: test-patches-${{ inputs.src_repo }}-${{ inputs.ref }}

on:
  workflow_dispatch:
    inputs:
      src_ref:
        required: true
        type: string
      src_repo:
        required: true
        type: string
      patch_ref:
        required: true
        type: string
      patch_repo:
        required: true
        type: string
  workflow_call:
    inputs:
      src_ref:
        required: true
        type: string
      src_repo:
        required: true
        type: string
      patch_ref:
        required: true
        type: string
      patch_repo:
        required: true
        type: string

concurrency: "${{ inputs.src_repo }}-${{ inputs.src_ref }}"
env:
  SRC_REPO: ${{ inputs.src_repo }}
  PATCH_REPO: ${{ inputs.patch_repo }}
  SRC_REF: ${{ inputs.src_ref }}
  PATCH_REF: ${{ inputs.patch_ref }}
  GIT_USER: "github-actions[bot]"
  GIT_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"

jobs:
  test-patches:
    runs-on: ubuntu-latest
    steps:
      - name: "Generate token"
        id: generate_token
        continue-on-error: true
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.GRAFANA_DELIVERY_BOT_APP_ID }}
          private_key: ${{ secrets.GRAFANA_DELIVERY_BOT_APP_PEM }}

      - name: "Get Grafana org membership"
        if: steps.generate_token.outputs.token != '' 
        id: org-state
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          export org_state=$(gh api orgs/grafana/memberships/${{ github.event.sender.login }} -q .state)
          echo "Checking org membership of Grafana for ${{ github.event.sender.login }}. State: ${org_state}"
          echo "ORG_STATE=${org_state}" >> "$GITHUB_OUTPUT"

      # Everything in the patch repo lives in main, patch_ref is the folder to use
      - name: "Checkout patch repo"
        uses: actions/checkout@v4
        if: steps.org-state.outputs.ORG_STATE == 'active' && steps.generate_token.outputs.token != ''
        with: 
          repository: ${{ inputs.patch_repo }}
          path: patches 
          token: ${{ steps.generate_token.outputs.token }}

      - name: "Checkout src repo"
        uses: actions/checkout@v4
        if: steps.org-state.outputs.ORG_STATE == 'active' && steps.generate_token.outputs.token != ''
        with: 
          repository: ${{ inputs.src_repo }}
          ref: ${{ inputs.src_ref }}
          path: src
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0

      - name: "Test patch application"
        id: patches
        if: steps.org-state.outputs.ORG_STATE == 'active' && steps.generate_token.outputs.token != ''
        working-directory: src
        run: |
          # Tell git who we are
          git config --local user.name ${GIT_USER}
          git config --local user.email ${GIT_USER_EMAIL}

          # Apply patches
          if [ -d "../patches/${PATCH_REF}" ];
          then
            git am --3way --committer-date-is-author-date -q ../patches/${PATCH_REF}/*.patch > /dev/null 2>&1
          fi

      - name: Handle patch failure
        if: failure() && steps.org-state.outputs.ORG_STATE == 'active' && steps.generate_token.outputs.token != ''
        run: echo "::error title='Failed to apply patches when mirroring'::The sync process was not able to apply active patches. See the documentation for how to resolve this error."
